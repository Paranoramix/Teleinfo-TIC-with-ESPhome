esphome:
  name: esplinky
  platform: ESP8266
  board: d1_mini
# déclaration du fichier source du composant custom (déposer la fichier my_tic_component.h à la racine de ESPhome)
  includes:
    - my_tic_component.h

wifi:
  ssid: "XXXXXXXXXXXXX"
  password: "XXXXXXXXXXXXX"

# facultative web server, enable if you need it
web_server:
  port: 80

# Example configuration entry
#debug:    # When enabled, logger must be at least debug (default) below.


# Logger configuration
logger:     
  baud_rate: 0   # disable logging via UART, help to avoid numerous crash with ESP_LOGD
  level: INFO   # INFO for less log, put DEBUG to view all the linky's "étiquettes" received  in the logs
  esp8266_store_log_strings_in_flash: False     # recommanded for ESP8266 https://esphome.io/components/sensor/custom.html

# Enable Home Assistant API (set a password here for more security)
api:

# Enable OTA (set a password here for more security)
ota:


status_led:
  pin:
    number: GPIO2
    
web_server:
  port: 80
  
# ajout du composant uart pour la communication série avec la sortie TIC du compteur
# GPIO13 = Pin D7 sur Wemos D1
uart:
#  tx_pin: GPIO15
  rx_pin: GPIO13
  baud_rate: 1200
  id: uart0
  parity: EVEN
  data_bits: 7
  stop_bits: 1

# alias pour accéder l'instance du composant
substitutions:
  name: "TIC"
  init: 'MyTicComponent::instance(id(uart0), 10000);'


# déclaration du composant custom
custom_component:
  - id: my_tic
    lambda: |-
      auto my_tic = ${init}
      App.register_component(my_tic);
      return {my_tic};
# déclaration des sensors numérique
# les sensors doivent être déclarés dans l'ordre de la fonction lambda
sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s
    unit_of_measurement: dB
    accuracy_decimals: 0
    force_update: false
    icon: mdi:wifi
  - platform: uptime
    name: "Uptime Sensor"
    update_interval: 60s
    unit_of_measurement: s
    accuracy_decimals: 0
    force_update: false
    icon: mdi:timer
  - platform: custom
    lambda: |-
      auto my_tic = ${init}
      return {my_tic->sensor_IINST, my_tic->sensor_ISOUSC, my_tic->sensor_PAPP, my_tic->sensor_BASE, my_tic->sensor_HCHC, my_tic->sensor_HCHP, my_tic->sensor_EJPHN, my_tic->sensor_EJPHPM, my_tic->sensor_IMAX};
    
    sensors:
      - name: "EDF-Intensite"
        unit_of_measurement: A
        accuracy_decimals: 0
        icon: mdi:power-plug
      - name: "EDF-Intensite souscrite"
        unit_of_measurement: A
        accuracy_decimals: 0
        icon: mdi:power-plug
      - name: "EDF-Puissance"
        unit_of_measurement: W
        accuracy_decimals: 0
        icon: mdi:power-plug
      - name: "EDF-Index Option Base"
        unit_of_measurement: kWh
        accuracy_decimals: 0
        icon: mdi:home-analytics
      - name: "EDF-Index Heures Creuses"
        unit_of_measurement: kWh
        accuracy_decimals: 0
        icon: mdi:home-analytics
      - name: "EDF-Index Heures Pleines"
        unit_of_measurement: kWh
        accuracy_decimals: 0
        icon: mdi:home-analytics
      - name: "EDF-Index EJP Heures Normales"
        unit_of_measurement: kWh
        accuracy_decimals: 0
        icon: mdi:home-analytics
      - name: "EDF-Index EJP Heures de Pointe Mobile"
        unit_of_measurement: kWh
        accuracy_decimals: 0
        icon: mdi:home-analytics
      - name: "EDF-Intensité appelée maximale"
        unit_of_measurement: A
        accuracy_decimals: 0
        icon: mdi:power-plug


# déclaration du sensor texte, c'est juste l'identifiant du compteur
text_sensor:
  - platform: custom
    lambda: |-
      auto my_tic = ${init}
      return {my_tic->sensor_ADCO, my_tic->sensor_OPTARIF, my_tic->sensor_PTEC, my_tic->sensor_HHPHC};
    text_sensors:
      - name: "ADCO"
      - name: "OPTARIF"
      - name: "PTEC"
      - name: "HHPHC"

binary_sensor:
  - platform: status
    name: "NodeMCU Status"


# switch permettant de stopper les mises à jour
switch:
  - platform: custom
    lambda: |-
      auto my_tic = ${init}
      return{my_tic};
    switches:
      name: "Receive"

